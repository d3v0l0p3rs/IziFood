{"version":3,"sources":["Redux/Reducers/Orders/orders.types.ts","Redux/Reducers/Orders/orders.actions.ts","Components/Column/column.types.ts","Components/Card/view.tsx","Redux/Reducers/Tables/tables.types.ts","Components/Column/view.tsx","Redux/Reducers/Orders/orders.selectors.ts","Components/CustomDialog/view.tsx","Components/Table/view.tsx","Redux/Reducers/Tables/table.actions.ts","Redux/Reducers/Tables/tables.selectors.ts","Components/Home/view.tsx","Components/App/view.tsx","Redux/Reducers/Orders/orders.reducer.ts","Redux/Reducers/Tables/tables.reducer.ts","Redux/Store/index.ts","index.tsx"],"names":["OrdersTypes","OrdersCurrentState","changeOrderStatus","orders","type","CHANGE_ORDER_STATUS","payload","setAddOrderFormVisible","show","SET_ADD_ORDER_FORM_VISIBLE","Order","Card","props","dispatch","useDispatch","useSelector","state","ordersReducer","className","client","product","phone","cost","deliveryType","currentState","onClick","id","index","findIndex","order","tempNewOrders","newStatus","setPreviousOrderStatus","disabled","setNextOrderStatus","TablesTypes","TablesCurrentState","orderButtons","cards","setCards","currentFilter","setCurrentFilter","excludedProperties","length","properties","Object","keys","filter","property","includes","newOrder","currentOrder","name","status","map","idx","ASC","getCardValue","card","value","charAt","sort","a","b","sortCardsBy","Column","useState","data","columnType","ordersSelector","filterPendingOrders","createSelector","ON_HOLD","filterCookingOrders","IN_PROGRESS","filterReadyOrders","READY","CustomDialog","Dialog","open","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","DialogActions","Button","negativeAction","positiveAction","Table","setTableStatus","table","CHANGE_TABLE_STATUS","changeTableStatus","bill","ButtonGroup","variant","color","aria-label","tablesSelector","tablesReducer","tables","Home","pendingOrdersSelector","useMemo","cookingOrdersSelector","readyOrdersSelector","pendingOrders","cookingOrders","readyOrders","showAddOrderForm","onSaveForm","useCallback","alert","onCancelSaveForm","Fab","App","path","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72d7b4d5.chunk.js","sourcesContent":["import {CardProps} from \"../../../Components/Card/card.types\"\n\nexport interface OrdersState {\n    orders: CardProps[]\n    showAddOrderForm: boolean\n}\n\nexport enum OrdersTypes {\n    CHANGE_ORDER_STATUS = \"CHANGE_ORDER_STATUS\",\n    SET_ADD_ORDER_FORM_VISIBLE = \"SET_ADD_ORDER_FORM_VISIBLE\",\n}\n\nexport type OrdersActions =\n    | { type: OrdersTypes.CHANGE_ORDER_STATUS , payload: CardProps[] }\n    | { type: OrdersTypes.SET_ADD_ORDER_FORM_VISIBLE, payload: boolean }\n\nexport enum OrdersCurrentState {\n    ON_HOLD = \"on_hold\",\n    IN_PROGRESS = \"in_progress\",\n    READY = \"ready\",\n    DONE = \"done\",\n    CANCEL = \"cancel\",\n}\n","import {OrdersActions, OrdersTypes} from \"./orders.types\"\nimport {CardProps} from \"../../../Components/Card/card.types\"\n\nexport function changeOrderStatus(orders: CardProps[]): OrdersActions {\n  return {\n    type: OrdersTypes.CHANGE_ORDER_STATUS,\n    payload: orders,\n  }\n}\n\nexport function setAddOrderFormVisible(show: boolean): OrdersActions {\n  return{\n    type: OrdersTypes.SET_ADD_ORDER_FORM_VISIBLE,\n    payload: show,\n  }\n}","import {CardProps} from \"../Card/card.types\"\n\nexport interface ColumnProps {\n    columnType: \"pending\" | \"cooking\" | \"ready\",\n    data: CardProps[],\n  }\n\nexport interface Filter {\n  name: keyof CardProps,\n  order: Order,\n}\n\nexport enum Order {\n  ASC = 1,\n  DESC = -1,\n}","import React from \"react\"\nimport \"./style.scss\"\nimport { CardProps, OrderState } from \"./card.types\"\nimport PersonIcon from \"@material-ui/icons/Person\"\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\"\nimport CallIcon from \"@material-ui/icons/Call\"\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\"\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\"\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\"\nimport { changeOrderStatus } from \"../../Redux/Reducers/Orders/orders.actions\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { rootState } from \"../../Redux/Store\"\n\nconst Card: React.FC<CardProps> = (props: CardProps) => {\n  const dispatch = useDispatch()\n\n  const orders = useSelector((state: rootState) => state.ordersReducer.orders)\n\n  const setNextOrderStatus = (id: number) => {\n    const index = orders.findIndex((order) => order.id === id)\n    const tempNewOrders = [...orders] //copy of current orders\n\n    let newStatus: OrderState = \"cancel\"\n\n    //temporal solution\n    switch (tempNewOrders[index].currentState) {\n      case \"on_hold\":\n        newStatus = \"in_progress\"\n        break\n\n      case \"in_progress\":\n        newStatus = \"ready\"\n        break\n\n      default:\n        newStatus = \"on_hold\"\n        break\n    }\n\n    tempNewOrders[index] = {\n      ...orders[index],\n      currentState: newStatus,\n    }\n    dispatch(changeOrderStatus(tempNewOrders))\n  }\n\n  const setPreviousOrderStatus = (id: number) => {\n    const index = orders.findIndex((order) => order.id === id)\n    const tempNewOrders = [...orders] //copy of current orders\n\n    let newStatus: OrderState = \"cancel\"\n\n    //temporal solution\n    switch (tempNewOrders[index].currentState) {\n      case \"in_progress\":\n        newStatus = \"on_hold\"\n        break\n\n      case \"ready\":\n        newStatus = \"in_progress\"\n        break\n\n      default:\n        newStatus = \"on_hold\"\n        break\n    }\n\n    tempNewOrders[index] = {\n      ...orders[index],\n      currentState: newStatus,\n    }\n    dispatch(changeOrderStatus(tempNewOrders))\n  }\n\n  return (\n    <div className=\"card-info-wapper\">\n      <div className=\"card-info-data-wrapper\">\n        <div>\n          <PersonIcon />\n        </div>\n        <div>\n          <span>{props.client}</span>\n        </div>\n      </div>\n\n      <div className=\"card-info-data-wrapper\">\n        <div>\n          <FastfoodIcon />\n        </div>\n        <div>\n          <span>{props.product}</span>\n        </div>\n      </div>\n\n      <div className=\"card-info-data-wrapper\">\n        <div>\n          <CallIcon />\n        </div>\n        <div>\n          <span>{props.phone}</span>\n        </div>\n      </div>\n\n      <div className=\"card-info-data-wrapper\">\n        <div>\n          <AttachMoneyIcon />\n        </div>\n        <div>\n          <span>{props.cost}</span>\n        </div>\n      </div>\n\n      <div className=\"card-info-data-wrapper\">\n        <div>\n          <AllInboxIcon />\n        </div>\n        <div>\n          <span>{props.deliveryType}</span>\n        </div>\n      </div>\n\n      <div className=\"card-info-data-wrapper\">\n        <div>\n          <HourglassEmptyIcon />\n        </div>\n        <div>\n          <span>{props.currentState}</span>\n        </div>\n      </div>\n\n      <div className=\"card-buttons-wrapper\">\n        <button\n          onClick={() => setPreviousOrderStatus(props.id)}\n          disabled={props.currentState === \"on_hold\"}\n        >\n          <NavigateBeforeIcon />\n        </button>\n        <button\n          onClick={() => setNextOrderStatus(props.id)}\n          disabled={props.currentState === \"ready\"}\n        >\n          <NavigateNextIcon />\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import { TableProps } from \"../../../Components/Table/table.types\"\n\nexport interface TablesState {\n    tables: TableProps[]\n}\n\nexport enum TablesTypes {\n    CHANGE_TABLE_STATUS = \"CHANGE_TABLE_STATUS\"\n}\n\nexport type TablesActions = {\n    type: TablesTypes.CHANGE_TABLE_STATUS , payload: TableProps\n}\n\nexport enum TablesCurrentState {\n    AVAILABLE = \"available\",\n    OCCUPIED = \"occupied\",\n    RESERVED = \"reserved\",\n}","import React, { useState } from \"react\"\nimport Card from \"../Card/view\"\nimport { CardProps } from \"../Card/card.types\"\nimport { ColumnProps, Order, Filter } from \"./column.types\"\nimport \"./style.scss\"\n\nconst sortCardsBy = (\n  cards: CardProps[],\n  property: keyof CardProps,\n  order: Order = Order.ASC,\n): CardProps[] => {\n  const getCardValue = (card: CardProps, property: keyof CardProps): string | number => {\n    let value: string | number = 0\n    if (typeof card[property] === \"string\") value = (card[property] as string).charAt(0)\n    if (typeof card[property] === \"number\") value = card[property] as number\n    return value\n  }\n  return cards.sort((a, b) =>\n    getCardValue(a, property) > getCardValue(b, property) ? order : -order,\n  )\n}\n\nconst orderButtons = (\n  cards: CardProps[],\n  setCards: (card: CardProps[]) => void,\n  currentFilter: Filter | null, setCurrentFilter: (filter: Filter) => void,\n): JSX.Element => {\n  const excludedProperties = [\"id\"]\n  if (cards.length === 0) return (<></>)\n  const properties = (Object.keys(cards[0]) as Array<keyof CardProps>)\n    .filter(property => !excludedProperties.includes(property))\n  const newOrder = (property: keyof CardProps, currentOrder: Order): number => {\n    return currentFilter && currentFilter.name === property ? -currentOrder : currentOrder\n  }\n  const status = (property: keyof CardProps, currentOrder: Order): number => {\n    let status = 0\n    if (currentFilter && currentFilter.name === property) status = newOrder(property, currentOrder)\n    return status\n  }\n\n  // TODO: This is just a template, buttons should have icons instead of names or numbers\n  return (<>\n    {properties.map((property, idx) => (\n      <button\n        onClick={() => {\n          const order = newOrder(property, currentFilter?.order || 1)\n          setCards(sortCardsBy(cards, property, order))\n          setCurrentFilter({name: property, order: order})\n        }}\n        key={idx}>\n          Order by {property} {status(property, currentFilter?.order || 1)}\n      </button>\n    ))}\n  </>)\n}\n\nconst Column: React.FC<ColumnProps> = (props: ColumnProps) => {\n  const [, setCards] = useState<CardProps[]>(props.data)\n  const [currentFilter, setCurrentFilter] = useState<Filter | null>(null)\n\n  return (\n    <div className=\"column-wrapper\">\n      <div className=\"column-title\">{props.columnType}</div>\n\n      {orderButtons(props.data, setCards, currentFilter, setCurrentFilter)}\n      <div className=\"column-data-container\">\n        {props.data.map((data, idx) => (\n          <Card\n            id={data.id}\n            product={data.product}\n            client={data.client}\n            phone={data.phone}\n            cost={data.cost}\n            deliveryType={data.deliveryType}\n            currentState={data.currentState}\n            key={idx}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Column\n","import { createSelector } from \"reselect\"\nimport { CardProps } from \"../../../Components/Card/card.types\"\nimport { rootState } from \"../../Store\"\nimport {OrdersCurrentState} from \"./orders.types\"\n\nexport const ordersSelector = (state: rootState): CardProps[] => state.ordersReducer.orders\n\nexport const filterPendingOrders = createSelector(\n  [ordersSelector],\n  (orders) => {\n    return orders?.filter(order => order.currentState === OrdersCurrentState.ON_HOLD)\n  })\n\nexport const filterCookingOrders = createSelector(\n  [ordersSelector],\n  (orders) => {\n    return orders?.filter(order => order.currentState === OrdersCurrentState.IN_PROGRESS)\n  })\n\nexport const filterReadyOrders = createSelector(\n  [ordersSelector],\n  (orders) => {\n    return orders?.filter(order => order.currentState === OrdersCurrentState.READY)\n  })","import React from \"react\"\n\nimport { CustomDialogProps } from \"./customdialog.types\"\n\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\n\nconst CustomDialog: React.FC<CustomDialogProps> = (\n  props: CustomDialogProps,\n) => {\n  return (\n    <Dialog open={props.show}>\n      <DialogTitle id=\"form-dialog-title\">Crear orden</DialogTitle>\n\n      <DialogContent>\n        <TextField autoFocus margin=\"dense\" label=\"Cliente\" fullWidth />\n\n        <TextField margin=\"dense\" id=\"asd\" label=\"Producto\" fullWidth />\n\n        <TextField margin=\"dense\" type=\"number\" label=\"Teléfono\" fullWidth />\n\n        <TextField margin=\"dense\" type=\"number\" label=\"Costo\" fullWidth />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={() => props.negativeAction()}>Cancelar</Button>\n        <Button onClick={() => props.positiveAction()}>Guardar</Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default CustomDialog\n","import React from \"react\"\nimport \"./style.scss\"\nimport { TableProps, TableState } from \"./table.types\"\nimport { useDispatch } from \"react-redux\"\nimport { Button, ButtonGroup } from \"@material-ui/core\"\nimport { changeTableStatus } from \"../../Redux/Reducers/Tables/table.actions\"\n\nconst Table: React.FC<TableProps> = (props: TableProps) => {\n  const dispatch = useDispatch()\n\n  const setTableStatus = (table: TableProps, state: TableState) => {\n    dispatch(changeTableStatus({...table, state: state}))\n  }\n\n  return (\n    <div className=\"table-info-wapper\">\n      <span>id: {props.id}</span>\n      <span>bill id: {props.bill}</span>\n      <span>state: {props.state}</span>\n      <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n        <Button\n          variant={props.state === \"available\" ? \"contained\" : \"text\"}\n          onClick={() => setTableStatus(props, \"available\")}\n          disabled={props.state === \"available\"}\n        >Disponible</Button>\n        <Button\n          variant={props.state === \"occupied\" ? \"contained\" : \"text\"}\n          onClick={() => setTableStatus(props, \"occupied\")}\n          disabled={props.state === \"occupied\"}\n        >Ocupada</Button>\n        <Button\n          variant={props.state === \"reserved\" ? \"contained\" : \"text\"}\n          onClick={() => setTableStatus(props, \"reserved\")}\n          disabled={props.state === \"reserved\"}\n        >Reservada</Button>\n      </ButtonGroup>\n    </div>\n  )\n}\n\nexport default Table\n","import { TablesActions, TablesTypes } from \"./tables.types\"\nimport { TableProps } from \"../../../Components/Table/table.types\"\n\nexport function changeTableStatus(table: TableProps): TablesActions {\n  return {\n    type: TablesTypes.CHANGE_TABLE_STATUS,\n    payload: table,\n  }\n}","import { TableProps } from \"../../../Components/Table/table.types\"\nimport { rootState } from \"../../Store\"\n\nexport const tablesSelector = (state: rootState): TableProps[] => state.tablesReducer.tables","import React, { useCallback, useMemo } from \"react\"\nimport Column from \"../Column/view\"\nimport \"./style.scss\"\nimport {\n  filterPendingOrders,\n  filterCookingOrders,\n  filterReadyOrders,\n} from \"../../Redux/Reducers/Orders/orders.selectors\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Fab from \"@material-ui/core/Fab\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport CustomDialog from \"../CustomDialog/view\"\nimport { setAddOrderFormVisible } from \"../../Redux/Reducers/Orders/orders.actions\"\nimport { rootState } from \"../../Redux/Store\"\nimport Table from \"../Table/view\"\nimport { tablesSelector } from \"../../Redux/Reducers/Tables/tables.selectors\"\n\nconst Home: React.FC = () => {\n  const dispatch = useDispatch()\n\n  //selectors\n  const pendingOrdersSelector = useMemo(() => filterPendingOrders, [])\n  const cookingOrdersSelector = useMemo(() => filterCookingOrders, [])\n  const readyOrdersSelector = useMemo(() => filterReadyOrders, [])\n\n  const pendingOrders = useSelector(pendingOrdersSelector, () => false)\n  const cookingOrders = useSelector(cookingOrdersSelector, () => false)\n  const readyOrders = useSelector(readyOrdersSelector, () => false)\n  const tables = useSelector(tablesSelector, () => false)\n\n  const showAddOrderForm = useSelector(\n    (state: rootState) => state.ordersReducer.showAddOrderForm,\n  )\n\n  const onSaveForm = useCallback(() => alert(\"positive\"), [])\n  const onCancelSaveForm = useCallback(\n    () => dispatch(setAddOrderFormVisible(false)),\n    [dispatch],\n  )\n\n  return (\n    <div className=\"main-wrapper\">\n      <div className=\"home-wrapper\">\n        <Column columnType=\"pending\" data={pendingOrders} />\n        <Column columnType=\"cooking\" data={cookingOrders} />\n        <Column columnType=\"ready\" data={readyOrders} />\n      </div>\n\n      <div className=\"fab-wapper\">\n        <Fab\n          className=\"custom-fab\"\n          onClick={() => dispatch(setAddOrderFormVisible(true))}\n        >\n          <AddIcon />\n        </Fab>\n      </div>\n\n      <CustomDialog\n        show={showAddOrderForm}\n        positiveAction={onSaveForm}\n        negativeAction={onCancelSaveForm}\n      />\n      <div>\n        {tables.map(table => (\n          <Table\n            key={table.id}\n            id={table.id}\n            bill={table.bill}\n            state={table.state}\n          ></Table>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from \"react\"\nimport \"./styles.scss\"\nimport Home from \"../Home/view\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nexport default function App(): JSX.Element {\n  return (\n    <div className=\"app-wrapper\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n","import {OrdersState, OrdersActions, OrdersTypes} from \"./orders.types\"\n\nconst initialState: OrdersState = {\n  orders: [\n    {\n      id: 1,\n      product: \"Papitas\",\n      client: \"Andros\",\n      phone: \"123456\",\n      cost: 1234,\n      deliveryType: \"tipo1\",\n      currentState: \"in_progress\",\n    },\n    {\n      id: 2,\n      product: \"Salchipapa\",\n      client: \"Andros\",\n      phone: \"123456\",\n      cost: 1234,\n      deliveryType: \"tipo1\",\n      currentState: \"on_hold\",\n    },\n    {\n      id: 3,\n      product: \"Hamburguesa\",\n      client: \"Andros\",\n      phone: \"123456\",\n      cost: 1234,\n      deliveryType: \"tipo1\",\n      currentState: \"ready\",\n    },\n  ],\n  showAddOrderForm: false,\n}\n\n\nexport default function OrdersReducer(\n  state: OrdersState = initialState,\n  action: OrdersActions,\n): OrdersState {\n  switch (action.type) {\n\n    case OrdersTypes.CHANGE_ORDER_STATUS: {\n      return {\n        ...state,\n        orders: action.payload,\n      }\n    }\n\n    case OrdersTypes.SET_ADD_ORDER_FORM_VISIBLE: {\n      return {\n        ...state,\n        showAddOrderForm: action.payload,\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}","import { TablesActions, TablesState, TablesTypes } from \"./tables.types\"\n\nconst initialState: TablesState = {\n  tables: [\n    {\n      id: 1,\n      bill: 1,\n      state: \"available\",\n    }, {\n      id: 2,\n      bill: 2,\n      state: \"occupied\",\n    }, {\n      id: 3,\n      bill: 3,\n      state: \"reserved\",\n    },\n  ],\n}\n\n\nexport default function tablesReducer(\n  state: TablesState = initialState,\n  action: TablesActions,\n): TablesState {\n  switch (action.type) {\n    case TablesTypes.CHANGE_TABLE_STATUS: {\n      return {\n        ...state,\n        tables: state.tables.map(\n          table => table.id === action.payload.id ? {...table, state: action.payload.state} : table,\n        ),\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}","import { createStore, combineReducers} from \"redux\"\nimport ordersReducer from \"../Reducers/Orders/orders.reducer\"\nimport tablesReducer from \"../Reducers/Tables/tables.reducer\"\n\nconst rootReducer  = combineReducers({\n  ordersReducer,\n  tablesReducer,\n})\n\nexport type rootState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./styles.scss\"\nimport App from \"./Components/App/view\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"./Redux/Store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n"],"sourceRoot":""}